"0","setwd('D:/michel/Universidade/Mestrado/disciplina/repo/data')"
"0","none <- read.csv('D:/michel/Universidade/Mestrado/disciplina/repo/data/monitoringCloudData_NONE.csv')"
"0","m01 <- read.csv('D:/michel/Universidade/Mestrado/disciplina/repo/data/monitoringCloudData_0.1.csv')"
"0","m05 <- read.csv('D:/michel/Universidade/Mestrado/disciplina/repo/data/monitoringCloudData_0.5.csv')"
"0","m1 <- read.csv('D:/michel/Universidade/Mestrado/disciplina/repo/data/monitoringCloudData_1.csv')"
"0",""
"0","datasets <- list(none, m01, m05, m1)"
"0","names <- list('(None Workload)', '(Workload of 0.1)', '(Workload of 0.5)', '(Workload of 1.0)')"
"0",""
"0","# Criando uma função que transforma valores em GB para MB"
"0","gbToMB <- function(mem){"
"0","  if (grepl(pattern='GB', x=mem)==T){"
"0","    return (parse_number(mem)*1024)"
"0","  } else{"
"0","    return (parse_number(mem))"
"0","  }"
"0","}"
"0",""
"0","#layout(matrix(c(1,2,3,4), nrow=2, byrow=T))"
"0","par(mfrow=c(2,2))"
"0","for (i in 1:length(datasets)){"
"0","  "
"0","  # Extraindo os números da coluna usedMemory"
"0","  datasets[[i]]$Memoria <- sapply(X=datasets[[i]]$usedMemory, FUN=gbToMB)"
"0",""
"0","  # Transformando o tempo em uma diferença entre o tempo i e o tempo inicial"
"0","  tempos <- vector()"
"0","  for (j in 1:nrow(datasets[[i]])){"
"0","    tempos[j] <- (difftime(datasets[[i]]$currentTime[j], datasets[[i]]$currentTime[1], units=c('secs')))/3600"
"0","  }"
"0","  datasets[[i]]$tempo <- tempos"
"0",""
"0","  # Plotando o resultado:"
"0","  plot(datasets[[i]]$tempo, datasets[[i]]$Memoria, type='l',"
"0","       main=paste('Memory Analysis', names[[i]], sep=' '),"
"0","       xlab='Time (hour)',"
"0","       ylab='Used Memory (MB)')"
"0","}"
