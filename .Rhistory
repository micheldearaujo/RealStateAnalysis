xaxis=list(title='Preço'),
yaxis=list(title='Frequência')) %>%
layout(width=800) # Configurando o tamanho da figura
hist1
# Criando a base para o boxplot
plot_ly(data=anuncios,
type='box',
colors=c('#FF5653')) %>%
add_boxplot(y=~Preco,   # Adicionando o traço do boxplot
name='Preço',
color='#FF5653') %>%
layout(width=800,
yaxis=list(title='Valor'))
plot_ly(data=anuncios,
type='box',
colors=c('#157B38')) %>% # Adicionando a cor verde para a área
add_trace(y=~Area,
name='Área (m²)',
color='#157B38') %>%
layout(width=800,               # Aumentando a largura do gráfico
yaxis=list(title='Valor'))
# Removendo outliers:
anunciosf <- anuncios[-which(anuncios$Preco %in% boxplot(anuncios$Preco, plot=F)$out),]
anunciosf <- anunciosf[-which(anunciosf$Area %in% boxplot(anunciosf$Area, plot=F)$out),]
hist1 <- plot_ly(data=anunciosf,
type='histogram') %>%
add_trace(name='Preço',
x=~Preco,
marker=list(color='#FF5653',
line=list(color="rgb(20,20,20)",
width=0.5)),
xbins=10) %>%
layout(title='Distribuição dos preços dos imóveis (sem outliers)',
xaxis=list(title='Preço'),
yaxis=list(title='Frequência'),
width=700)
hist1
# Criando o boxplot do preço com os dados fitlrados
bx1 <- plot_ly(data=anunciosf,
type='box',
colors=c('#FF5653')) %>%
add_boxplot(y=~Preco,
name='Preço',
color='#FF5653') %>%
layout(title='Distribuição dos preços e áreas dos imóveis (sem outliers)',
width=700)
# Criando o boxplot da área com os dados fitlrados
bx2 <- plot_ly(data=anunciosf,
type='box',
colors=c('#157B38')) %>%
add_boxplot(y=~Area,
name='Área',
color='#157B38') %>%
layout(width=700)
fig1 <- subplot(bx1, bx2, nrows=1)
fig1
# Criando um gráfico de dispersão (scatter plot) para a variável Preço
# O gráfico divide Apartamentos e Casas em diferentes cores
plot_ly(data=anunciosf,
type='scatter',
x=~Area,
y=~Preco,
color=~Tipo,
colors=c('#FF5653', '#5A41F3'),
marker = list(size=7),
mode='markers') %>%
layout(title='Relação entre Área e Preço do imóvel',
xaxis=list(title='Área (m²)'),
yaxis=list(title='Preço'),
width=800)
# Criando o primeiro scatter plot, para Preço vs Quartos
sct1 <- plot_ly(data=anunciosf,
type='scatter',
x=~Quartos,
y=~Preco,
color=~Tipo,
colors=c('#FF5653', '#5A41F3'),
marker = list(size=7),
mode='markers') %>%
layout(xaxis=list(title='Quartos', autotick=FALSE, tick0=0, dtick=1),
yaxis=list(title='Preço'),
width = 700)
# Criando o segundo scatter plot, para Preço vs Banheiros
sct2 <- plot_ly(data=anunciosf,
type='scatter',
x=~Banheiros,
y=~Preco,
color=~Tipo,
colors=c('#FF5653', '#5A41F3'),
marker = list(size=7),
mode='markers',
showlegend=F) %>%
layout(xaxis=list(title='Banheiros', autotick=FALSE, tick0=0, dtick=1),
yaxis=list(title='Preço'),
width = 700)
fig2 <- subplot(sct1, sct2, titleX = T, titleY=T, shareY=T, which_layout = c(1,2))
fig2
# Primeiro vamos remover os dados faltantes do dataset
anunciosf <- anunciosf[!is.na(anunciosf$Preco),]
# Teste de correlação Preco vs Quartos
pversusq <- cor(x=anunciosf$Preco, y=anunciosf$Quartos)
paste("O coeficiente de correlação Pearson entre Preco e Quartos é", pversusq)
# Teste de correlação Preco vs Banheiros
pversusb <- cor(x=anunciosf$Preco, y=anunciosf$Banheiros)
paste("O coeficiente de correlação Pearson entre Preco e Banheiros é", pversusb)
# Criando um boxplot em que os dois tipos de imóveis são separados por cores.
bx3 <- plot_ly(data=anunciosf,
color=~Tipo, # Separação
colors=c('#FF5653', '#5A41F3')) %>%
add_boxplot(y=~Preco) %>%
layout(title='Distribuição dos preços dos imóveis',
width=700)
bx3
# Recriando os boxplots apenas para imóveis com 1 quarto, através da função Filter
bx3 <- plot_ly(data=filter(anunciosf, Quartos==1),
color=~Tipo,
colors=c('#FF5653', '#5A41F3')) %>%
add_boxplot(y=~Preco) %>%
layout(title='Distribuição dos preços dos imóveis',
width=700)
bx3
# Verificando a normalidade pelo histograma
hist2 <- plot_ly(data=filter(anunciosf, Quartos==1)) %>%
add_histogram(x=~Preco,
color=~Tipo,
nbinsx=20, # Definindo a quantidade de barras, 5000/250 = 20
colors=c('#FF5653', '#5A41F3')) %>%
layout(xaxis=list(title='Preço', tick0=0, autotick=F, dtick=500), # Especificando a formatação do eixo x.
yaxis=list(title='Frequência'),
title='Verificando a Normalidade do Preço',
width=700)
hist2
# Verificando a normalidade pelo QQ-plot
qqnorm(anunciosf$Preco, main='QQ plot da variável Preço', pch=18)
qqline(anunciosf$Preco)
# Realizando o teste de Anderson-Darling para Casas
ad.test(filter(anunciosf, Quartos==1, Tipo=='CS')$Preco)
# Realizando o teste de Anderson-Darling para Apartamentos
ad.test(filter(anunciosf, Quartos==1, Tipo=='AP')$Preco)
# Realizando o tesde U de Mann-Whitney para variável Preco em função da variável categórica Tipo,
# Com nível de confiança de 95%.
wilcox.test(Preco ~ Tipo,
data=filter(anunciosf, Quartos==1),
conf.level=0.95)
# Agrupando os dados de acordo com a variável categórica Tipo e criando algumas estatísticas
resumo <- anunciosf %>%
group_by(Tipo) %>%
summarise(Quantidade = n(), # A função summarise é muito útil para criar estatísticas
Media.Precos = round(mean(Preco, na.rm=T),2),
DesvioPadrao.Precos = round(sd(Preco, na.rm=T),2),
Media.Quartos = round(mean(Quartos),2),
Media.Banheiros = round(mean(Banheiros),2))
datatable(data=resumo, caption = 'Resumo das variáveis numéricas')
head(select(anunciosf, -c(1:5)), 5)
anunciosf <- data.frame(drop_na(anunciosf))
# Agrupando os dados em relação ao estado para contar as ocorrências e calcular a média de preço por estado
by_state1 <- anunciosf %>%
group_by(Estado) %>%
summarise(Quantidade=n(),
MediaPreco = round(mean(Preco),2)) %>%
arrange(desc(Quantidade, MediaPreco))             # Ordendando a tabela por quantidade de observações
# Criando a tabela com a função datatable, do pacote DT
datatable(data=by_state1, caption='Número de observações e média por estado')
# Realizando o agrupamento por estado e por tipo de imóvel
by_state2 <- anunciosf %>%
group_by(Estado, Tipo) %>%
summarise(Quantidade=n(),               # Contando as ocorrências
MediaPreco = mean(Preco)) %>% # Calculando as médias
arrange(MediaPreco)
bar1 <- plot_ly(data=by_state2,
type='bar',
color=~Tipo,
colors= c('#FF5653', '#5A41F3')) %>%
add_trace(x=~Estado, y=~MediaPreco) %>%
layout(width=800)
bar1
# Lendo o arquivo que contém a média salarial por estado
salarios <- read.csv('salarios.csv', sep=';')
names(salarios)[2] <- 'MediaSalario'
head(salarios, 5)
anunciosg <- merge(x=by_state1,
y=salarios,
by='Estado')
anunciosg$MediaSalario <- parse_number(anunciosg$MediaSalario, locale=locale(decimal_mark=',', grouping_mark = '.'))
# Ordendando o dataframe de acordo com a média dos preços
anunciosg <- arrange(anunciosg, MediaPreco)
# Calculando a proporção entre salário e aluguel medios
anunciosg <- mutate(anunciosg, Proporcao = anunciosg$MediaPreco/anunciosg$MediaSalario)
# Criando um barplot na horizontal que mostra tanto o valor médio do aluguel
# quanto a porcentagem que um aluguel médio custa do salário médio, para cada estado
bar2 <- plot_ly(data=anunciosg, type='bar',
orientation='h',
color=~Proporcao, # As cores mostram o valor da proporção, que vai de 0 a 1.
colors=) %>%
add_trace(y=~Estado,
x=~MediaPreco,
name='Preco') %>%
add_annotations(xref=anunciosg$MediaPreco, yref=anunciosg$Estado,    # Adicionando as porcentagens ao gráfico
y=anunciosg$Estado, x=anunciosg$MediaPreco*1 + 200,
text=paste(round(anunciosg$Proporcao, 2)*100, '%'),
showarrow=F) %>%
layout(title='Proporção entre valor médio de aluguel e salário médio',
xaxis=list(title='Preço Aluguel'),
yaxis=list(title='Estado'),
width=700)
bar2
Acima_da_Media <- filter(anunciosg, Proporcao>1)[-2]
datatable(Acima_da_Media, caption='Estados com alto custo de vida')
# Vamos transformar o dataframe original em um dataframe do tipo sf, atraves da função st_as_sf.
pontos_sf <- st_as_sf(anunciosf, coords=c('long','lat'), crs=4326)
# Baixando o mapa do Brasil, separado por estados.
estados_sf <- ne_states(country='brazil', returnclas='sf')
# Plotando o mapa do Brasil
mapa <- ggplot() +
geom_sf(data=estados_sf, # o ggplot possui uma funcao especial para plotar mapas, a geom_sf
fill=gray(0.85), color=gray(0.7)) +
labs(title='Mapa do Brasil')
mapa
mapa <- ggplot() +
geom_sf(data=estados_sf, # Mapa do Brasil
fill=gray(0.85),
color=gray(0.7)) +
geom_sf(data=pontos_sf,  # um 'scatter plot' espacial das residências
alpha=0.7,
aes(color=Preco), # definindo a cor de acordo com o preço
size=2.5,
show.legend = 'point') +
labs(title='Distribuição dos imóveis no Brasil')
mapa
# Primeiro é necessário unir o dataframe estados_sf com o dataframe que possui as informações das médias dos preços
new.df <- merge(x=estados_sf, y=anunciosg,
by.x ='postal', by.y='Estado', all=T)
# Criando intervalos discretos para a variável Preco
breaks_media <- classIntervals(c(min(anunciosg$MediaPreco) - 0.00001, anunciosg$MediaPreco), n=7, style='quantile')
# Transformando a variável preço em categorias
new.df <- mutate(new.df, MediaPrecoCat = cut(MediaPreco, breaks_media$brks))
# Renomeando os nomes das categorias
levels(new.df$MediaPrecoCat) <- c('(1000,1210]', '(1210,1390]', '(1390,1580]', '(1580,1780]',
'(1780,2000]','(2000,2070]', '(2070,2850]')
mapa2 <- ggplot() +
geom_sf(data=new.df,
aes(fill=MediaPrecoCat)) + # Preenchendo os estados de acordo com a média do preço
scale_fill_brewer(palette='OrRd') +
labs(title='Média de preço por Estado',
fill='Preço Médio')
mapa2
# Mapa da proporcao
# Criando intervalos para a proporção, que já foi calculada anteriormente.
breaks_prop <- classIntervals(c(min(anunciosg$Proporcao) - 0.00001, anunciosg$Proporcao), n=7, style='quantile')
# Transformando
new.df <- mutate(new.df, ProporcaoCat = cut(Proporcao, breaks_prop$brks))
# Criando o mapa
mapa3 <- ggplot() +
geom_sf(data=new.df,
aes(fill=ProporcaoCat)) +       # Preenchendo de acordo com o valor da proporção
scale_fill_brewer(palette='OrRd') +
labs(title='Proporção entre aluguel e salário',
fill='Proporção')
mapa3
# Lendo o mapa do Brasil separado em seus municípios
cities <- read_municipality(year=2018, showProgress=FALSE)
# Plotando
ggplot() +
geom_sf(data=cities, fill=gray(0.85), color=gray(0.7))
# Vamos ver como é essa variavel sf
str(cities)
# Filtrando apenas as cidades que estão na RMR:
cidades_rmr <- c('Abreu E Lima', 'Araçoiaba', 'Cabo De Santo Agostinho', 'Camaragibe', 'Igarassu', 'Ilha De Itamaracá', 'Ipojuca', 'Itapissuma', 'Jaboatão Dos Guararapes', 'Moreno', 'Olinda', 'Paulista', 'Recife', 'São Lourenço Da Mata')
rmr_sf <- filter(cities, name_muni %in% cidades_rmr)
rmr_sf$geom
# Plotando o mapa da RMR com seus municípios
rmr_map <- ggplot() +
geom_sf(data=rmr_sf, fill=gray(0.85), color=gray(0.7)) +
labs(title='Região Metropolitana do Recife')
rmr_map
rmr_sf <- rmr_sf[-1,]
# Plotando o mapa da RMR com seus municípios
rmr_map <- ggplot() +
geom_sf(data=rmr_sf, fill=gray(0.85), color=gray(0.7)) +
labs(title='Região Metropolitana do Recife')
rmr_map
# Redefinindo o vetor com as cidades. Perceba que existe uma diferença entre
# as letras minúsculas das preposições
cidades_rmr <- c('Abreu e Lima', 'Araçoiaba', 'Cabo de Santo Agostinho', 'Camaragibe', 'Igarassu', 'Ilha de Itamaracá', 'Ipojuca', 'Itapissuma', 'Jaboatão dos Guararapes', 'Moreno', 'Olinda', 'Paulista', 'Recife', 'São Lourenço da Mata')
rmr_df <- filter(anunciosf, Cidade %in% cidades_rmr)
# Agrupando os dados de acordo com a cidade
rmr_df_grouped <- rmr_df %>%
group_by(Cidade) %>%
summarise(Quantidade = n(),
Media.Preco = round(mean(Preco),2)) %>%
arrange(desc(Quantidade))
datatable(rmr_df_grouped)
sct_map2 <- ggplot() +
geom_sf(data=rmr_sf, # Mapa da RMR
fill=gray(0.85),
color=gray(0.7)) +
geom_sf(data=filter(pontos_sf, Cidade %in% cidades_rmr),  # filtrando os pontos que estão na RMR
alpha=0.7,
aes(color=Preco), # definindo a cor de acordo com o preço
size=2.5,
show.legend = 'point') +
labs(title='Distribuição dos imóveis na RMR')
sct_map2
# Criando um gráfico de dispersão (scatter plot) para a variável Preço
# O gráfico divide Apartamentos e Casas em diferentes cores
plot_ly(data=anunciosf,
type='scatter',
x=~Area,
y=~Preco,
color=~Tipo,
symbol = ~Tipo,
colors=c('#FF5653', '#5A41F3'),
marker = list(size=7),
mode='markers') %>%
layout(title='Relação entre Área e Preço do imóvel',
xaxis=list(title='Área (m²)'),
yaxis=list(title='Preço'),
width=800)
# Criando um gráfico de dispersão (scatter plot) para a variável Preço
# O gráfico divide Apartamentos e Casas em diferentes cores
plot_ly(data=anunciosf,
type='scatter',
x=~Area,
y=~Preco,
color=~Tipo,
symbol = ~Tipo,
symbols = c('circle', 'x')
colors=c('#FF5653', '#5A41F3'),
# Criando um gráfico de dispersão (scatter plot) para a variável Preço
# O gráfico divide Apartamentos e Casas em diferentes cores
plot_ly(data=anunciosf,
type='scatter',
x=~Area,
y=~Preco,
color=~Tipo,
symbol = ~Tipo,
symbols = c('circle', 'x'),
colors=c('#FF5653', '#5A41F3'),
marker = list(size=7),
mode='markers') %>%
layout(title='Relação entre Área e Preço do imóvel',
xaxis=list(title='Área (m²)'),
yaxis=list(title='Preço'),
width=800)
# Criando o primeiro scatter plot, para Preço vs Quartos
sct1 <- plot_ly(data=anunciosf,
type='scatter',
x=~Quartos,
y=~Preco,
color=~Tipo,
symbol=~Tipos,
symbols=c('circle', 'x'),
colors=c('#FF5653', '#5A41F3'),
marker = list(size=7),
mode='markers') %>%
layout(xaxis=list(title='Quartos', autotick=FALSE, tick0=0, dtick=1),
yaxis=list(title='Preço'),
width = 700)
# Criando o segundo scatter plot, para Preço vs Banheiros
sct2 <- plot_ly(data=anunciosf,
type='scatter',
x=~Banheiros,
y=~Preco,
color=~Tipo,
symbol=~Tipos,
symbols=c('circle', 'x'),
colors=c('#FF5653', '#5A41F3'),
marker = list(size=7),
mode='markers',
showlegend=F) %>%
layout(xaxis=list(title='Banheiros', autotick=FALSE, tick0=0, dtick=1),
yaxis=list(title='Preço'),
width = 700)
fig2 <- subplot(sct1, sct2, titleX = T, titleY=T, shareY=T, which_layout = c(1,2))
# Criando o primeiro scatter plot, para Preço vs Quartos
sct1 <- plot_ly(data=anunciosf,
type='scatter',
x=~Quartos,
y=~Preco,
color=~Tipo,
symbol=~Tipo,
symbols=c('circle', 'x'),
colors=c('#FF5653', '#5A41F3'),
marker = list(size=7),
mode='markers') %>%
layout(xaxis=list(title='Quartos', autotick=FALSE, tick0=0, dtick=1),
yaxis=list(title='Preço'),
width = 700)
# Criando o segundo scatter plot, para Preço vs Banheiros
sct2 <- plot_ly(data=anunciosf,
type='scatter',
x=~Banheiros,
y=~Preco,
color=~Tipo,
symbol=~Tipo,
symbols=c('circle', 'x'),
colors=c('#FF5653', '#5A41F3'),
marker = list(size=7),
mode='markers',
showlegend=F) %>%
layout(xaxis=list(title='Banheiros', autotick=FALSE, tick0=0, dtick=1),
yaxis=list(title='Preço'),
width = 700)
fig2 <- subplot(sct1, sct2, titleX = T, titleY=T, shareY=T, which_layout = c(1,2))
fig2
knitr::opts_chunk$set(echo = TRUE)
setwd('D:/michel/Universidade/Mestrado/disciplina/repo/2_VA/ProjetoFinal')
knitr::opts_chunk$set(echo = TRUE)
install.packages('rmdformats')
knitr::opts_chunk$set(echo = TRUE)
install.packages('readr')
# Conhecido como a gramática da manipulação de dados, o dplyr fornece diversas funções para manipulação de dataframes, como mutate(), select(), filter().
library(dplyr)
# O pacote readr fornece funções muito eficiente para leitura de dados retangulares, como dataframes, além de funções para extrair dados, como a parse_number.
library(readr)
# O pacote stringr, também pertencente ao tidyverse, possui funções para manipular strings, como str_replace, str_to_upper e expressões regulares.
library(stringr)
# O pacote tidyr tem como objetivo deixar os dados na forma tidy, ou seja, organizados. Possui funções como drop_na e fill, para lidar com dados nulos.
library(tidyr)
# O pacote DT faz uma ponte com o R e as bibliotecas de JavaScript para criação de tabelas interativas.
library(DT)
# O tidygeocoder fornece uma interface para realizar requisições de geoinformações, como obter CEPs, latitudes e longitudes.
library(tidygeocoder)
knitr::opts_chunk$set(echo = TRUE)
install.packages('tidygeocoder')
knitr::opts_chunk$set(echo = TRUE)
install.packages('ggpubr')
knitr::opts_chunk$set(echo = TRUE)
install.packages('rnaturalearth')
install.packages('geobr')
setwd('D:/Projects/DataScience/Brazil_RealState')
knitr::opts_chunk$set(echo = TRUE)
setwd('D:/Projects/DataScience/Brazil_RealState')
install.packages('nortest')
knitr::opts_chunk$set(echo = TRUE)
setwd('D:/Projects/DataScience/Brazil_RealState')
#install.packages('nortest')
anuncios <- read.csv('housing_prices.csv')
anuncios <- read.csv('imoveis.csv')
knitr::opts_chunk$set(echo = TRUE)
setwd('D:/Projects/DataScience/Brazil_RealState/')
#install.packages('nortest')
install.packages('rnaturalearthhires')
install.packages('rnaturalearthhires', repos='http://packages.ropensci.org', type='source')
knitr::opts_chunk$set(echo = TRUE)
install.packages('rgeos')
knitr::opts_chunk$set(echo = TRUE)
install.packages('sp')
knitr::opts_chunk$set(echo = TRUE)
install.packages('sf')
knitr::opts_chunk$set(echo = TRUE)
install.packages('rgeos')
# Vamos transformar o dataframe original em um dataframe do tipo sf, atraves da função st_as_sf.
pontos_sf <- st_as_sf(anunciosf, coords=c('long','lat'), crs=4326)
# Conhecido como a gramática da manipulação de dados, o dplyr fornece diversas funções para manipulação de dataframes, como mutate(), select(), filter().
library(dplyr)
# O pacote readr fornece funções muito eficiente para leitura de dados retangulares, como dataframes, além de funções para extrair dados, como a parse_number.
library(readr)
# O pacote stringr, também pertencente ao tidyverse, possui funções para manipular strings, como str_replace, str_to_upper e expressões regulares.
library(stringr)
# O pacote tidyr tem como objetivo deixar os dados na forma tidy, ou seja, organizados. Possui funções como drop_na e fill, para lidar com dados nulos.
library(tidyr)
# O pacote DT faz uma ponte com o R e as bibliotecas de JavaScript para criação de tabelas interativas.
library(DT)
# O tidygeocoder fornece uma interface para realizar requisições de geoinformações, como obter CEPs, latitudes e longitudes.
library(tidygeocoder)
# O ggplot2 é um sistema de criação de gráficos. É conhecido como a gramática dos gráficos pois a estrutura dos gráficos funciona de forma declarativa e bem estruturada.
library(ggplot2)
# O plotly é uma biblioteca grafica interativa com capacidade de gerar gráficos publicáveis online sem perder sua interatividade.
library(plotly)
# O pacote ggpubr é um pacote com o objetivo de criar visualizações elegantes de dados no R. Ele facilita a construção dos gráficos.
library(ggpubr)
# O pacote nortest fornece funções para testar normalidade de distribuições estatísticas.
require(nortest)
# O pacote RColorBrewer fornece várias paletas de cores extras para os gráficos.
library(RColorBrewer)
# O pacote rnaturalearth fornece conexão com dados de mapas da Natural Earth. Com ele, vamos baixar o mapa do Brasil dividido em estados
library(rnaturalearth)
# Este pacote serve para criar intervalos discretos de variáveis contínuas.
library(classInt)
# O pacote sf fornece uma série de ferramentas para trabalhar com vetores geoespaciais, como pontos, linhas e poligonos. Vamos utilizá-lo para gerar geo-dataframes.
library(sf)
# O pacote geobr é parecido com o rnaturalearth. Contudo, ele possui mais informações específicas ao Brasil, como mapas municipais e sensos.
library(geobr)
# Vamos transformar o dataframe original em um dataframe do tipo sf, atraves da função st_as_sf.
pontos_sf <- st_as_sf(anunciosf, coords=c('long','lat'), crs=4326)
# Baixando o mapa do Brasil, separado por estados.
estados_sf <- ne_states(country='brazil', returnclas='sf')
# Plotando o mapa do Brasil
mapa <- ggplot() +
geom_sf(data=estados_sf, # o ggplot possui uma funcao especial para plotar mapas, a geom_sf
fill=gray(0.85), color=gray(0.7)) +
labs(title='Mapa do Brasil')
mapa
library(stringr)
library(readr)
library(dplyr)
library(tidyr)
library(tidyverse)
library(tidygeocoder)
install.packages('tidyverse')
library(tidyverse)
install.packages('tidyverse')
install.packages('tidyverse')
install.packages('tidyverse')
install.packages('tidyverse')
library(tidyverse)
library(tidygeocoder)
library(sf)
install.packages('sf')
install.packages('sf')
install.packages('sf')
